import React, { useState } from 'react';
import { Alert, AlertDescription } from '@/components/ui/alert';

const MatrixDeterminantSignCalculator = () => {
  const [matrixSize, setMatrixSize] = useState(2);
  const [matrix, setMatrix] = useState(Array(5).fill().map(() => Array(5).fill('')));
  const [result, setResult] = useState('');

  const handleSizeChange = (e) => {
    setMatrixSize(parseInt(e.target.value));
    setResult('');
  };

  const handleInputChange = (row, col, value) => {
    const newMatrix = [...matrix];
    newMatrix[row][col] = value;
    setMatrix(newMatrix);
    setResult('');
  };

  const calculateDeterminantSign = () => {
    const getSign = (num) => {
      if (num === '+') return 1;
      if (num === '-') return -1;
      if (num === '0') return 0;
      return null; // For empty or invalid inputs
    };

    const calculateDeterminant = (m) => {
      const n = m.length;
      
      // Check for any undetermined (null) values
      if (m.flat().some(val => val === null)) return null;
      
      // Base case for 1x1 matrix
      if (n === 1) return getSign(m[0][0]);
      
      // Base case for 2x2 matrix
      if (n === 2) {
        const [a, b, c, d] = m.flat().map(getSign);
        return a * d - b * c;
      }
      
      let det = 0;
      let hasUndetermined = false;
      for (let j = 0; j < n; j++) {
        const subMatrix = m.slice(1).map(row => [...row.slice(0, j), ...row.slice(j + 1)]);
        const cofactor = getSign(m[0][j]);
        const subDet = calculateDeterminant(subMatrix);
        
        if (subDet === null) {
          hasUndetermined = true;
        } else if (cofactor !== 0) {
          det += (j % 2 === 0 ? 1 : -1) * cofactor * subDet;
        }
      }
      return hasUndetermined ? null : det;
    };

    const detSign = calculateDeterminant(matrix.slice(0, matrixSize).map(row => row.slice(0, matrixSize)));

    if (detSign === null) {
      setResult("The sign of the determinant is undetermined. This could be due to incomplete or conflicting information.");
    } else if (detSign > 0) {
      setResult("The determinant is positive.");
    } else if (detSign < 0) {
      setResult("The determinant is negative.");
    } else {
      setResult("The determinant is zero. The matrix is singular (not invertible).");
    }
  };

  return (
    <div className="p-4 max-w-md mx-auto">
      <h1 className="text-2xl font-bold mb-4">Matrix Determinant Sign Calculator</h1>
      <div className="mb-4">
        <label className="block mb-2">Matrix Size:</label>
        <select 
          value={matrixSize} 
          onChange={handleSizeChange}
          className="w-full p-2 border rounded"
        >
          <option value={2}>2x2</option>
          <option value={3}>3x3</option>
          <option value={4}>4x4</option>
          <option value={5}>5x5</option>
        </select>
      </div>
      <div className="mb-4">
        <table className="w-full">
          <tbody>
            {[...Array(matrixSize)].map((_, row) => (
              <tr key={row}>
                {[...Array(matrixSize)].map((_, col) => (
                  <td key={col} className="p-1">
                    <div className="flex items-center">
                      <span className="mr-2 text-sm">A<sub>{row + 1}{col + 1}</sub></span>
                      <select
                        value={matrix[row][col]}
                        onChange={(e) => handleInputChange(row, col, e.target.value)}
                        className="w-full p-2 border rounded"
                      >
                        <option value="">Select</option>
                        <option value="+">+</option>
                        <option value="-">-</option>
                        <option value="0">0</option>
                      </select>
                    </div>
                  </td>
                ))}
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      <button 
        onClick={calculateDeterminantSign}
        className="w-full p-2 bg-blue-500 text-white rounded hover:bg-blue-600"
      >
        Calculate
      </button>
      {result && (
        <Alert className="mt-4">
          <AlertDescription>{result}</AlertDescription>
        </Alert>
      )}
    </div>
  );
};

export default MatrixDeterminantSignCalculator;
